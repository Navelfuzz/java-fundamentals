/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;

class LibraryTest {
    // Method 1: Roll dice test :: Lab 02
    @Test
    void rollTest() {
        Library sut = new Library();
        int[] actualOutput = sut.roll(5);
        assertEquals(5, actualOutput.length, "length of array should be 5");

        for (int roll : actualOutput) {
            assertTrue(roll >= 1 && roll <= 6, "Roll values should all be between 1 and 6");
        }
    }

    // Method 2: Contains Duplicates test :: Lab 02
    @Test
    void containsDuplicatesTest() {
        Library sut = new Library();
        int[] testOne = {1, 3, 4, 7, 9}; //should return false
        int[] testTwo = {1, 3, 4, 7, 3}; //should return true
        boolean actualOutputOne = sut.containsDuplicates(testOne);
        boolean actualOutputTwo = sut.containsDuplicates(testTwo);

        assertFalse(actualOutputOne, "Should return false");
        assertTrue(actualOutputTwo, "should return true");
    }

    // Method 3: Average test :: Lab 02
    @Test
    void averageTest() {
        Library sut = new Library();
        int[] testOne = {1, 3, 4, 7, 9}; //should return 4.8
        int[] testTwo = {1, 3, 4, 7, 3}; //should return 3.6
        double actualOutputOne = sut.average(testOne);
        double actualOutputTwo = sut.average(testTwo);

        assertTrue(actualOutputOne > 4 && actualOutputOne < 5, "Output should be 4.8");
        assertTrue(actualOutputTwo > 3 && actualOutputTwo < 4, "Output should be 3.6");

    }

    // Method 4: Lowest Average test :: Lab 02
    @Test
    void lowestAverageTest() {
        Library sut = new Library();
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int[] expectedArray = {55, 54, 60, 53, 59, 57, 61};
        int[] actualOutput = sut.lowestAverage(weeklyMonthTemperatures);

        assertArrayEquals(expectedArray, actualOutput, "Array should be {55, 54, 60, 53, 59, 57, 61}");
    }

    // Method 5: Analyzing Weather Data test :: Lab 03
    @Test
    void analyzeTemperaturesTest() {
        Library sut = new Library();
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        String expectedOutput = "High: 72\nLow: 51\nNever saw temperature: 63\nNever saw temperature: 67\nNever saw temperature: 68\nNever saw temperature: 69\n";
        assertEquals(expectedOutput, sut.analyzeTemperatures(weeklyMonthTemperatures));
    }

    // Method 6: Tallying Election test :: Lab 03
    @Test
    void tallyTest() {
        Library sut = new Library();
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String expectedWinner = "Bush received the most votes!";
        assertEquals(expectedWinner, sut.tally(votes));
    }
}