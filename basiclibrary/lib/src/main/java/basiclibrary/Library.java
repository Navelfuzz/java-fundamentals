/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

public class Library {
    // Method 1: Rolling Dice :: Lab 02
    public int[] roll(int n) {
        int[] rolls = new int[n];
        for (int i = 0; i < n; i++) {
            // Rolling a six-sided dice (random number between 1 and 6)
            rolls[i] = (int) (Math.random() * 6) + 1;
        }
        return rolls;
    }

    // Method 2: Contains Duplicates :: Lab 02
    public boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    // Method 3: Calculating Averages :: Lab 02
    public double average(int[] arr) {
        if (arr.length == 0) {
            return 0.0;
        }
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return (double) sum / arr.length;
    }

    // Method 4: Arrays of Arrays - Calculate lowest average :: Lab 02
    public int[] lowestAverage(int[][] arrays) {
        if (arrays.length == 0) {
            return new int[0];
        }
        double lowestAverage = Double.MAX_VALUE;
        int[] lowestAverageArray = null;

        for (int[] arr : arrays) {
            double average = average(arr);
            if (average < lowestAverage) {
                lowestAverage = average;
                lowestAverageArray = arr;
            }
        }
        return lowestAverageArray;
    }

    // Method 5: Analyzing Weather Data :: Lab 03
    public String analyzeTemperatures(int[][] weeklyMonthTemperatures) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        HashSet<Integer> uniqueTemperatures = new HashSet<>();

        // Find min and max temperatures, and store unique temperatures in the set
        for (int[] weekTemperatures : weeklyMonthTemperatures) {
            for (int temperature : weekTemperatures) {
                uniqueTemperatures.add(temperature);
                min = Math.min(min, temperature);
                max = Math.max(max, temperature);
            }
        }

        // Create the string containing temperatures not seen during the month
        StringBuilder result = new StringBuilder();
        for (int i = min; i <= max; i++) {
            if (!uniqueTemperatures.contains(i)) {
                result.append("Never saw temperature: ").append(i).append("\n");
            }
        }

        return "High: " + max + "\nLow: " + min + "\n" + result.toString();
    }

    // Method 6: Tallying Election :: Lab 03
    public String tally(List<String> votes) {
        HashMap<String, Integer> tallyMap = new HashMap<>();

        // Count votes
        for (String candidate : votes) {
            tallyMap.put(candidate, tallyMap.getOrDefault(candidate, 0) + 1);
        }

        // Find the candidate with the most votes
        String winner = "";
        int maxVotes = 0;
        for (String candidate : tallyMap.keySet()) {
            int votesCount = tallyMap.get(candidate);
            if (votesCount > maxVotes) {
                maxVotes = votesCount;
                winner = candidate;
            }
        }

        return winner + " received the most votes!";
    }
}